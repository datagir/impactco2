import '@testing-library/jest-dom'
import { act, screen } from '@testing-library/react'
import mockRouter from 'next-router-mock'
import TransportPage from 'pages/transport.tsx'
import '../test-utils/match-media.js'
import { renderWithWrapper } from '../test-utils/render-with-wrapper'

jest.mock('next/router', () => jest.requireActual('next-router-mock'))
describe('TransportPage - affiche la page itin√©raire', () => {
  test('Par d√©faut, affiche le composant Distance', async () => {
    // Given
    mockRouter.push('/transport')
    // When
    renderWithWrapper(<TransportPage category={getTransportCategory()} />)
    // Then
    expect(await screen.findByTestId('distanceWrapper')).toBeInTheDocument()
  })
  test('Par d√©faut, affiche les bilans carbone', async () => {
    // Given
    mockRouter.push('/transport')
    // When
    renderWithWrapper(<TransportPage category={getTransportCategory()} />)
    // Then
    expect(await screen.findByTestId('velo')).toHaveTextContent('V√©lo ou marche00 kg CO2e')
  })
  test("Par d√©faut, limite le nombre d'√©l√©ments affich√©s", async () => {
    // Given
    mockRouter.push('/transport')
    // When
    renderWithWrapper(<TransportPage category={getTransportCategory()} />)
    // Then
    const velo = await screen.findByTestId('velo')
    const co2list = velo.parentElement.querySelectorAll('a')
    expect(co2list.length).toBe(7)
  })
  test('Peut afficher tous les bilans carbone', async () => {
    // Given
    mockRouter.push('/transport')
    renderWithWrapper(<TransportPage category={getTransportCategory()} />)
    const velo = await screen.findByTestId('velo')
    // When
    act(() => {
      screen.getByLabelText('Voir tous les modes de transport').click()
    })
    // Then
    const co2list = velo.parentElement.querySelectorAll('a')
    expect(co2list.length).toBe(17)
  })
  test('Peut afficher le mode covoiturage', async () => {
    // Given
    mockRouter.push('/transport')
    renderWithWrapper(<TransportPage category={getTransportCategory()} />)
    const velo = await screen.findByTestId('velo')
    // When
    act(() => {
      screen.getByLabelText('Afficher le covoiturage').click()
    })
    // Then
    const co2list = velo.parentElement.querySelectorAll('a')
    expect(co2list.length).toBe(9)
  })
})

function getTransportCategory() {
  return {
    id: 4,
    name: 'Transport',
    emoji: 'üö¥‚Äç‚ôÇÔ∏è',
    slug: 'transport',
    title: "D√©couvrez l'impact du transport sur le climat",
    equivalent: 'mode[s] de transport',
    gender: 'm',
    divider: 1,
    display: true,
    unit: 'km',
    include:
      "par personne en France. Sont incluses les √©missions directes, la construction des v√©hicules (fabrication, maintenance et fin de vie) et la production et distribution de carburant et d'√©lectricit√©. La construction des infrastructures (routes, rails, a√©roports...) n'est pas incluse.",
    meta: {
      title: 'Transport',
      description:
        "Quelle est l'empreinte carbone de vos d√©placements ? Avec Impact CO2 vous connaitrez votre impact sur le climat",
    },
  }
}
